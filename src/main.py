import datetime
import logging.config
import re
from typing import List, Any

import telebot
from decouple import config
from telegram_bot_calendar import WMonthTelegramCalendar

from botrequests.bestdeal import get_list_hotels_bestdeal
from botrequests.history import SQLighter
from botrequests.lowprice_and_highprice import get_list_hotels
from botrequests.users import User
from logging_config import dict_config
from src.config import DATABASE_NAME

TOKEN = config('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)

logging.config.dictConfig(dict_config)
logger = logging.getLogger('main')


@bot.message_handler(commands=['start'])
def command_start(message: Any) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≤—ã–≤–æ–¥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞"""
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É {message.text}')
    start_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    start_markup.row('/start', '/help', '/lowprice')
    start_markup.row('/highprice', '/bestdeal', '/history')
    bot.send_message(message.from_user.id,
                     'ü§ñ –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π –Ω–∞ Hotels.com.\n'
                     '\n'
                     '–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n'
                     '/lowprice - –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ.\n'
                     '/highprice - –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ.\n'
                     '/bestdeal - –≤—ã–≤–æ–¥ –æ—Ç–µ–ª–µ–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.\n'
                     '/history - –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.\n'
                     '/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞',
                     reply_markup=start_markup)


@bot.message_handler(commands=['help'])
def command_help(message: Any) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help"""
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É {message.text}')
    bot.send_message(message.from_user.id,
                     '–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n'
                     '/lowprice - –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ.\n'
                     '/highprice - –≤—ã–≤–æ–¥ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π –≤ –≥–æ—Ä–æ–¥–µ.\n'
                     '/bestdeal - –≤—ã–≤–æ–¥ –æ—Ç–µ–ª–µ–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.\n'
                     '/history - –≤—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.\n'
                     '/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞')


@bot.message_handler(commands=['lowprice', 'highprice', 'bestdeal'])
def command_lowprice_or_highprice_or_bestdeal(message: Any) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–∞–Ω–¥ –±–æ—Ç–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π"""
    current_user = User.get_user(user_id=message.from_user.id)
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É "{message.text}"')
    if message.text == '/lowprice':
        current_user.command = message.text
        current_user.sortorder = 'PRICE'
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞')
        bot.register_next_step_handler(message, quantity_hotels)
    elif message.text == '/highprice':
        current_user.command = message.text
        current_user.sortorder = 'PRICE_HIGHEST_FIRST'
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞')
        bot.register_next_step_handler(message, quantity_hotels)
    elif message.text == '/bestdeal':
        current_user.command = message.text
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞')
        bot.register_next_step_handler(message, range_of_prices)


def range_of_prices(message: Any) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–æ–º–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /bestdeal"""
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—â–µ—Ç –≥–æ—Ä–æ–¥ "{message.text}"')
    current_user = User.get_user(user_id=message.from_user.id)
    current_user.city = message.text
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ(1000/3000)')
    bot.register_next_step_handler(message, distances_from_center)


def distances_from_center(message: Any) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω"""
    current_user = User.get_user(user_id=message.from_user.id)
    try:
        if re.search(r'\d+/\d+', message.text) is None:
            raise ValueError
        if int(message.text.split('/')[0]) > int(message.text.split('/')[1]):
            raise TypeError
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω "{message.text}"')
        current_user.price_range = message.text
        bot.send_message(message.from_user.id,
                         '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ç–µ–ª—å –æ—Ç —Ü–µ–Ω—Ç—Ä–∞(–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)')
        bot.register_next_step_handler(message, check_distance)
    except ValueError as e:
        logger.exception(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω', e)
        bot.send_message(message.from_user.id, '–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É(1000/3000)')
        bot.register_next_step_handler(message, distances_from_center)
    except TypeError as e:
        logger.exception(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π', e)
        bot.send_message(message.from_user.id, '–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π')
        bot.register_next_step_handler(message, distances_from_center)


def check_distance(message: Any) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
    current_user = User.get_user(user_id=message.from_user.id)
    try:
        int(message.text)
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ "{message.text}" –∫–º')
        current_user.distance = message.text
        bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –Ω–∞–π—Ç–∏?')
        bot.register_next_step_handler(message, show_photo)
    except ValueError as e:
        logger.exception(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ', e)
        bot.send_message(message.from_user.id, '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ–º –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö')
        bot.register_next_step_handler(message, check_distance)


def quantity_hotels(message: Any) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–æ–º–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—â–µ—Ç –≥–æ—Ä–æ–¥ "{message.text}"')
    current_user = User.get_user(user_id=message.from_user.id)
    current_user.city = message.text
    bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –Ω–∞–π—Ç–∏?')
    bot.register_next_step_handler(message, show_photo)


def show_photo(message: Any) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π"""
    current_user = User.get_user(user_id=message.from_user.id)
    try:
        int(message.text)
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π "{message.text}"')
        current_user.quantity_hotels = message.text
        bot.send_message(message.from_user.id, '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª–µ–π?')
        bot.register_next_step_handler(message, quantity_photo)
    except ValueError as e:
        logger.exception(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ', e)
        bot.send_message(message.chat.id, '–ö–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–º')
        bot.register_next_step_handler(message, show_photo)


def quantity_photo(message: Any) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ª–æ–≤–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –Ω–µ—Ç"""
    current_user = User.get_user(user_id=message.from_user.id)
    if message.text.lower() in ['–¥–∞', '–Ω–µ—Ç']:
        current_user.show_photo = message.text
        if message.text.lower() == '–¥–∞':
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π')
            bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫(–Ω–µ –±–æ–ª—å—à–µ 10)?')
            bot.register_next_step_handler(message, checking_for_quantity_of_photo)
        else:
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π')
            check_in(message=message)
    else:
        bot.send_message(message.chat.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å <b>–¥–∞</b> –∏–ª–∏ <b>–Ω–µ—Ç</b>', parse_mode='HTML')
        bot.register_next_step_handler(message, quantity_photo)


def checking_for_quantity_of_photo(message: Any) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    current_user = User.get_user(user_id=message.from_user.id)
    try:
        if int(message.text) > 10:
            raise OverflowError
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ —Ñ–æ—Ç–æ "{message.text}"')
        current_user.quantity_photo = message.text
        check_in(message=message)
    except ValueError as e:
        logger.exception(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ', e)
        bot.send_message(message.from_user.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–º')
        bot.register_next_step_handler(message, checking_for_quantity_of_photo)
    except OverflowError as e:
        logger.exception(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 10', e)
        bot.send_message(message.from_user.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10')
        bot.register_next_step_handler(message, checking_for_quantity_of_photo)


@bot.callback_query_handler(func=WMonthTelegramCalendar.func(calendar_id=1))
def cal(c: Any) -> None:
    """ –ö–∞–ª–µ–Ω–¥–∞—Ä—å 1 –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∑–∞—Å–µ–ª–µ–Ω–∏—è """
    day89: datetime = datetime.date.today() + datetime.timedelta(days=89)
    result, key, step = WMonthTelegramCalendar(calendar_id=1,
                                               min_date=datetime.date.today(),
                                               max_date=day89).process(c.data)
    if not result and key:
        bot.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è –≤ –æ—Ç–µ–ª—å",
                              c.message.chat.id,
                              c.message.message_id,
                              reply_markup=key)
    elif result:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {c.from_user.id} –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É "{result}"')
        current_user = User.get_user(user_id=c.from_user.id)
        current_user.check_in_date = datetime.datetime.strftime(result, '%Y-%m-%d')
        bot.edit_message_text(f"–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è –≤ –æ—Ç–µ–ª—å {result}", c.message.chat.id, c.message.message_id)
        check_out(message=c.message, user_id=c.from_user.id)


def check_in(message: Any) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∑–∞—Å–µ–ª–µ–Ω–∏—è """
    day89: datetime = datetime.date.today() + datetime.timedelta(days=89)
    calendar, step = WMonthTelegramCalendar(calendar_id=1,
                                            min_date=datetime.date.today(),
                                            max_date=day89).build()
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è –≤ –æ—Ç–µ–ª—å", reply_markup=calendar)


@bot.callback_query_handler(func=WMonthTelegramCalendar.func(calendar_id=2))
def cal(c: Any) -> None:
    """ –ö–∞–ª–µ–Ω–¥–∞—Ä—å 2 –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞ """
    current_user = User.get_user(user_id=c.from_user.id)
    check_in_date: datetime = datetime.datetime.strptime(current_user.check_in_date, '%Y-%m-%d')

    start_range: datetime = check_in_date + datetime.timedelta(days=1)
    day90: datetime = datetime.date.today() + datetime.timedelta(days=90)

    result, key, step = WMonthTelegramCalendar(calendar_id=2,
                                               min_date=start_range,
                                               max_date=day90).process(c.data)
    if not result and key:
        bot.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ç–µ–ª—è",
                              c.message.chat.id,
                              c.message.message_id,
                              reply_markup=key)
    elif result:
        current_user.check_out_date = datetime.datetime.strftime(result, '%Y-%m-%d')
        bot.edit_message_text(f"–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ç–µ–ª—è {result}", c.message.chat.id, c.message.message_id)
        print_info_for_user(message=c.message, user_id=c.from_user.id)


def check_out(message: Any, user_id: int) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞ """
    current_user = User.get_user(user_id=user_id)
    check_in_date: datetime = datetime.datetime.strptime(current_user.check_in_date, '%Y-%m-%d').date()

    start_range: datetime = check_in_date + datetime.timedelta(days=1)
    day90: datetime = datetime.date.today() + datetime.timedelta(days=90)
    calendar, step = WMonthTelegramCalendar(calendar_id=2,
                                            min_date=start_range,
                                            max_date=day90).build()
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ç–µ–ª—è", reply_markup=calendar)


def print_info_for_user(message: Any, user_id: int) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    current_user = User.get_user(user_id=user_id)
    hotels_name: List[str] = []
    result = ''
    logger.info(f'–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}')
    bot.send_message(message.chat.id, '–ò—â—É...')
    if current_user.command in ['/lowprice', '/highprice']:
        result = get_list_hotels(user=current_user)
    elif current_user.command == '/bestdeal':
        result = get_list_hotels_bestdeal(user=current_user)
    if result is False or result == {}:
        logger.info(f'–ü–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –±—ã–ª–æ –Ω–∏—á–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ')
        bot.send_message(
            message.chat.id,
            f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –≥–æ—Ä–æ–¥–µ'
            f' {current_user.city.capitalize()} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—Ç–µ–ª–µ–π.'
        )
    elif result is None:
        logger.info(f'–ü–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API')
        bot.send_message(message.chat.id,
                         '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–∞–π—Ç—É')
    else:
        bot.send_message(message.chat.id,
                         f'–ù–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –≤ –≥–æ—Ä–æ–¥–µ {current_user.city.capitalize()} –Ω–∞–π–¥–µ–Ω–æ:')
        db = SQLighter(DATABASE_NAME)
        if current_user.show_photo == '–¥–∞':
            for k, v in result.items():
                info = f"<b>{k} –≤–∞—Ä–∏–∞–Ω—Ç:</b>\n" \
                       f"–ù–∞–∑–≤–∞–Ω–∏–µ: <a href='https://ru.hotels.com/ho{v['id']}'>{v['name']}</a>\n" \
                       f"–ê–¥—Ä–µ—Å: {v['address']}\n" \
                       f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞: {v['distance']}\n" \
                       f"–¶–µ–Ω–∞: {v['price']}\n" \
                       f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: "
                hotels_name.append(v['name'])
                bot.send_message(user_id, info, parse_mode='HTML', disable_web_page_preview=True)
                bot.send_media_group(user_id, v['photo'])
                db.safe_user_info(
                    user_id,
                    current_user.command,
                    f"<a href='https://ru.hotels.com/ho{v['id']}'>{v['name']}</a>",
                    v['address'],
                    v['distance'],
                    v['price'],
                )
        else:
            for k, v in result.items():
                info = f"<b>{k} –≤–∞—Ä–∏–∞–Ω—Ç:</b>\n" \
                       f"–ù–∞–∑–≤–∞–Ω–∏–µ: <a href='https://ru.hotels.com/ho{v['id']}'>{v['name']}</a>\n" \
                       f"–ê–¥—Ä–µ—Å: {v['address']}\n" \
                       f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞: {v['distance']}\n" \
                       f"–¶–µ–Ω–∞: {v['price']}\n"
                bot.send_message(user_id, info, parse_mode='HTML', disable_web_page_preview=True)
                db.safe_user_info(
                    user_id,
                    current_user.command,
                    f"<a href='https://ru.hotels.com/ho{v['id']}'>{v['name']}</a>",
                    v['address'],
                    v['distance'],
                    v['price'],
                )
        db.close()
        logger.info(f'–ó–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω')
    current_user.clear_user_info()


@bot.message_handler(commands=['history'])
def command_history(message: Any) -> None:
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /history, –≤—ã–≤–æ–¥–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É {message.text}')
    user_id = message.from_user.id
    db = SQLighter(DATABASE_NAME)
    result = db.get_user_info(user_id=user_id)
    bot.send_message(message.from_user.id, '<b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:</b>', parse_mode='HTML')
    if result:
        for i_info in result:
            info = f'–ö–æ–º–∞–Ω–¥–∞: {i_info[0]}\n' \
                   f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {i_info[1]}\n' \
                   f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {i_info[2]}\n' \
                   f'–ê–¥—Ä–µ—Å: {i_info[3]}\n' \
                   f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞: {i_info[4]}\n' \
                   f'–¶–µ–Ω–∞: {i_info[5]}\n'
            bot.send_message(message.from_user.id, info, parse_mode='HTML', disable_web_page_preview=True)
    else:
        bot.send_message(message.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞')
    db.close()


if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)
